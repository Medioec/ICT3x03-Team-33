version: '3.3'
services:
    nginx-waf:
        image: owasp/modsecurity-crs:nginx
        networks:
            - waf-to-frontend
        ports:
            - '${HTTP_PORT}'
            - '${HTTPS_PORT}'
        volumes:
            - ./nginx-waf/data/nginx/templates/:/etc/nginx/templates/:ro
            - ${LOCAL_SSL_CERT_PATH}:/etc/letsencrypt/live/${BASE_HOST}/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/etc/letsencrypt/live/${BASE_HOST}/privkey.pem:ro
            - ./cert/certificates/nginx-waf-cert.pem:/etc/nginx/ssl/fullchain.pem:ro
            - ./cert/certificates/nginx-waf-key.pem:/etc/nginx/ssl/privkey.pem:ro
            - ./cert/ca/ca-cert.pem:/etc/nginx/ssl/serverca.crt:ro
        environment:
            - PROXY=1
            - MODSEC_RULE_ENGINE=On
            - ANOMALY_INBOUND=10
            - BASE_HOST=${BASE_HOST}
        restart: always

    frontend:
        build: ./cinema-booking/frontend
        networks:
            - waf-to-frontend
            - frontend-to-identity
            - frontend-to-booking
            - frontend-to-movie
        environment:
            - CAPTCHA_KEY=${CAPTCHA_KEY}
        volumes:
            - ./cert/certificates/frontend-cert.pem:/app/fullchain.pem:ro
            - ./cert/certificates/frontend-key.pem:/app/privkey.pem:ro
            - ./cert/ca/ca-cert.pem:/app/ca-cert.pem:ro
        ports:
            - "${FRONTEND_PORT}"
        depends_on:
            - identity

    identity:
        build: 
            context: ./cinema-booking
            dockerfile: ./identity/Dockerfile
        networks:
            - frontend-to-identity
            - identity-to-payment
            - identity-to-databaseservice
        environment:
            PYTHONUNBUFFERED: 1
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
        ports:
            - "${IDENTITY_PORT}"
        volumes:
            - ./cinema-booking/identity/logs:/logs
            - ./cert/certificates/identity-cert.pem:/app/fullchain.pem:ro
            - ./cert/certificates/identity-key.pem:/app/privkey.pem:ro
            - ./cert/ca/ca-cert.pem:/app/ca-cert.pem:ro
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "20"
        depends_on:
            - database
            - databaseservice

    movie:
        build: 
            context: ./cinema-booking
            dockerfile: ./movie/Dockerfile
        networks:
            - frontend-to-movie
            - movie-to-databaseservice
        environment:
            PYTHONUNBUFFERED: 1
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
        volumes:
            - ./cert/certificates/movie-cert.pem:/app/fullchain.pem:ro
            - ./cert/certificates/movie-key.pem:/app/privkey.pem:ro
            - ./cert/ca/ca-cert.pem:/app/ca-cert.pem:ro
        ports:
            - "${MOVIE_PORT}"
        depends_on:
            - database
            - databaseservice
    
    booking:
        build: 
            context: ./cinema-booking
            dockerfile: ./booking/Dockerfile
        networks:
            - frontend-to-booking
            - booking-to-payment
            - booking-to-databaseservice
        environment:
            PYTHONUNBUFFERED: 1
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
        volumes:
            - ./cert/certificates/booking-cert.pem:/app/fullchain.pem:ro
            - ./cert/certificates/booking-key.pem:/app/privkey.pem:ro
            - ./cert/ca/ca-cert.pem:/app/ca-cert.pem:ro
        ports:
            - "${BOOKING_PORT}"
        depends_on:
            - database
            - databaseservice

    payment:
        build: 
            context: ./cinema-booking
            dockerfile: ./payment/Dockerfile
        networks:
            - identity-to-payment
            - booking-to-payment
            - payment-to-databaseservice
        environment:
            PYTHONUNBUFFERED: 1
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
        volumes:
            - ./cert/certificates/payment-cert.pem:/app/fullchain.pem:ro
            - ./cert/certificates/payment-key.pem:/app/privkey.pem:ro
            - ./cert/ca/ca-cert.pem:/app/ca-cert.pem:ro
        ports:
            - "${PAYMENT_PORT}"
        depends_on:
            - database
            - databaseservice

    databaseservice:
        build: 
            context: ./cinema-booking
            dockerfile: ./databaseservice/Dockerfile
        networks:
            - identity-to-databaseservice
            - movie-to-databaseservice
            - payment-to-databaseservice
            - booking-to-databaseservice
            - databaseservice-to-database
        environment:
            PYTHONUNBUFFERED: 1
            DB_HOST: database
            DB_NAME: ${DBSVC_NAME}
            DB_NORMALUSER: ${DBSVC_NORMALUSER}
            DB_NORMALPASSWORD: ${DBSVC_NORMALPASSWORD}
        ports:
            - "${DBSERVICE_PORT}"
        volumes:
            - ./cinema-booking/databaseservice/logs:/logs
            - ./cert/certificates/databaseservice-cert.pem:/app/fullchain.pem:ro
            - ./cert/certificates/databaseservice-key.pem:/app/privkey.pem:ro
            - ./cert/ca/ca-cert.pem:/app/ca-cert.pem:ro
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "20"
        depends_on:
            - database

    database:
        build: ./cinema-booking/database
        networks:
            - databaseservice-to-database
            - sessioncleaning-to-database
        environment:
            POSTGRES_DB: ${SUPERUSER_DB_NAME}
            POSTGRES_USER: ${POSTGRES_SUPERUSER}
            POSTGRES_PASSWORD: ${POSTGRES_SUPERUSER_PASSWORD}
            DB_NAME: ${DB_NAME}
            DB_NORMALUSER: ${DB_NORMALUSER}
            DB_NORMALPASSWORD: ${DB_NORMALPASSWORD}
        volumes:
            - ./cinema-booking/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
            - postgres_container:/var/lib/postgresql/data
        ports:
            - "${DB_PORT}"
    
    ofelia-scheduler:
        image: mcuadros/ofelia:v0.3.7
        networks:
            - scheduler-to-sessioncleaning
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command: daemon --docker
        labels:
            - ofelia.enabled=true
        depends_on:
            - sessioncleaning
           
    sessioncleaning:
        build: 
            context: ./cinema-booking
            dockerfile: ./sessioncleaning/Dockerfile
        networks:
            - scheduler-to-sessioncleaning
            - sessioncleaning-to-database
        entrypoint: tail -f /dev/null
        environment:
            PYTHONUNBUFFERED: 1
            DB_HOST: database
            DB_NAME: ${DBSVC_NAME}
            DB_NORMALUSER: ${DBSVC_NORMALUSER}
            DB_NORMALPASSWORD: ${DBSVC_NORMALPASSWORD}
        logging:
            driver: "json-file"
            options:
                max-size: "1m"
                max-file: "5"
        labels:
            - ofelia.enabled=true
            - ofelia.job-exec.sessioncleaning.schedule=0 0 2 * * *
            - ofelia.job-exec.sessioncleaning.no-overlap=true
            - ofelia.job-exec.sessioncleaning.command=python /app/app.py --run-function        
        depends_on:
            - database

networks:
  default:
    external:
      name: non-existent-network
  waf-to-frontend:
    driver: bridge
  frontend-to-identity:
    driver: bridge
  frontend-to-booking:
    driver: bridge
  frontend-to-movie:
    driver: bridge
  booking-to-payment:
    driver: bridge
  identity-to-payment:
    driver: bridge
  identity-to-databaseservice:
    driver: bridge
  movie-to-databaseservice:
    driver: bridge
  payment-to-databaseservice:
    driver: bridge
  booking-to-databaseservice:
    driver: bridge
  databaseservice-to-database:
    driver: bridge
  scheduler-to-sessioncleaning:
    driver: bridge
  sessioncleaning-to-database:
    driver: bridge

volumes:
  postgres_container:
