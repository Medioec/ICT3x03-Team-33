version: '3.3'
services:
    nginx-waf:
        build: ./nginx-waf/
        networks:
            - internet-access
            - waf-to-frontend
        ports:
            - '${HTTP_PORT}:80'
            - '${HTTPS_PORT}:443'
        volumes:
            - ./nginx-waf/data/nginx/templates/:/etc/nginx/templates/:ro
            - ${LOCAL_SSL_CERT_PATH}:/etc/letsencrypt/live/3x03.redapplepie.com/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/etc/letsencrypt/live/3x03.redapplepie.com/privkey.pem:ro
        environment:
            - PROXY=1
            - MODSEC_AUDIT_ENGINE=On
            - MODSEC_RULE_ENGINE=On
            - ANOMALY_INBOUND=10
            - HEALTH=${HEALTH}
        restart: always
        privileged: true

    frontend:
        build: ./cinema-booking/frontend
        networks:
            - waf-to-frontend
            - frontend-to-identity
            - frontend-to-booking
            - frontend-to-movie

    identity:
        build: 
            context: ./cinema-booking
            dockerfile: ./identity/Dockerfile
        networks:
            - frontend-to-identity
            - identity-to-payment
            - identity-to-databaseservice
        volumes:
            - ${LOCAL_SSL_CERT_PATH}:/app/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/app/privkey.pem:ro
        environment:
            - PYTHONUNBUFFERED=1

    movie:
        build: 
            context: ./cinema-booking
            dockerfile: ./movie/Dockerfile
        networks:
            - frontend-to-movie
            - movie-to-databaseservice
        volumes:
            - ${LOCAL_SSL_CERT_PATH}:/app/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/app/privkey.pem:ro
        environment:
            - PYTHONUNBUFFERED=1
    
    booking:
        build: 
            context: ./cinema-booking
            dockerfile: ./booking/Dockerfile
        networks:
            - frontend-to-booking
            - booking-to-payment
            - booking-to-databaseservice
        volumes:
            - ${LOCAL_SSL_CERT_PATH}:/app/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/app/privkey.pem:ro
        environment:
            - PYTHONUNBUFFERED=1

    payment:
        build: 
            context: ./cinema-booking
            dockerfile: ./payment/Dockerfile
        networks:
            - identity-to-payment
            - booking-to-payment
            - payment-to-databaseservice
        volumes:
            - ${LOCAL_SSL_CERT_PATH}:/app/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/app/privkey.pem:ro
        environment:
            - PYTHONUNBUFFERED=1

    databaseservice:
        build: 
            context: ./cinema-booking
            dockerfile: ./databaseservice/Dockerfile
        networks:
            - identity-to-databaseservice
            - movie-to-databaseservice
            - payment-to-databaseservice
            - booking-to-databaseservice
            - databaseservice-to-database
        volumes:
            - ${LOCAL_SSL_CERT_PATH}:/app/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/app/privkey.pem:ro
        environment:
            PYTHONUNBUFFERED: 1
            DB_HOST: database
            DB_NAME: ${DBSVC_NAME}
            DB_NORMALUSER: ${DBSVC_NORMALUSER}
            DB_NORMALPASSWORD: ${DBSVC_NORMALPASSWORD}

    database:
        build:
            context: ./cinema-booking/database
        networks:
          - databaseservice-to-database
        environment:
            POSTGRES_DB: ${SUPERUSER_DB_NAME}
            POSTGRES_USER: ${POSTGRES_SUPERUSER}
            POSTGRES_PASSWORD: ${POSTGRES_SUPERUSER_PASSWORD}
            DB_NAME: ${DB_NAME}
            DB_NORMALUSER: ${DB_NORMALUSER}
            DB_NORMALPASSWORD: ${DB_NORMALPASSWORD}
        volumes:
            - ./cinema-booking/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
            # - ./cinema-booking/init.sql:/docker-entrypoint-initdb.d/init.sql
            - postgres_container:/var/lib/postgresql/data

    ofelia-scheduler:
        image: mcuadros/ofelia:v0.3.7
        networks:
            - scheduler-to-sessioncleaning
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command: daemon --docker
        labels:
            - ofelia.enabled=true
        depends_on:
            - sessioncleaning
           
    sessioncleaning:
        container_name: sessioncleaning
        build: 
            context: ./cinema-booking
            dockerfile: ./sessioncleaning/Dockerfile
        networks:
            - scheduler-to-sessioncleaning
            - sessioncleaning-to-database
        entrypoint: tail -f /dev/null
        environment:
            PYTHONUNBUFFERED: 1
            DB_HOST: database
            DB_NAME: ${DBSVC_NAME}
            DB_NORMALUSER: ${DBSVC_NORMALUSER}
            DB_NORMALPASSWORD: ${DBSVC_NORMALPASSWORD}
        logging:
            driver: "json-file"
            options:
                max-size: "1m"
                max-file: "5"
        labels:
            - ofelia.enabled=true
            - ofelia.job-exec.sessioncleaning.schedule=0 0 2 * * *
            - ofelia.job-exec.sessioncleaning.no-overlap=true
            - ofelia.job-exec.sessioncleaning.command=python /app/app.py --run-function        
        depends_on:
            - database


networks:
  internet-access:
    driver: bridge
  waf-to-frontend:
    driver: bridge
    internal: true
  frontend-to-identity:
    driver: bridge
    internal: true
  frontend-to-booking:
    driver: bridge
    internal: true
  frontend-to-movie:
    driver: bridge
    internal: true
  booking-to-payment:
    driver: bridge
    internal: true
  identity-to-payment:
    driver: bridge
    internal: true
  identity-to-databaseservice:
    driver: bridge
    internal: true
  movie-to-databaseservice:
    driver: bridge
    internal: true
  payment-to-databaseservice:
    driver: bridge
    internal: true
  booking-to-databaseservice:
    driver: bridge
    internal: true
  databaseservice-to-database:
    driver: bridge
    internal: true
  scheduler-to-sessioncleaning:
    driver: bridge
    internal: true
  sessioncleaning-to-database:
    driver: bridge
    internal: true

volumes:
  postgres_container:
