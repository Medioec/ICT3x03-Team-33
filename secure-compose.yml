version: '3.3'
services:
    nginx-waf:
        build: ./nginx-waf/
        networks:
            - internet-access
            - waf-to-frontend
        ports:
            - '${HTTP_PORT}:80'
            - '${HTTPS_PORT}:443'
        volumes:
            - ./nginx-waf/data/nginx/templates/:/etc/nginx/templates/:ro
            - ${LOCAL_SSL_CERT_PATH}:/etc/letsencrypt/live/3x03.redapplepie.com/fullchain.pem:ro
            - ${LOCAL_SSL_KEY_PATH}:/etc/letsencrypt/live/3x03.redapplepie.com/privkey.pem:ro
        environment:
            - PROXY=1
            - MODSEC_AUDIT_ENGINE=On
            - MODSEC_RULE_ENGINE=On
            - ANOMALY_INBOUND=10
            - HEALTH=${HEALTH}
        restart: always
        privileged: true

    frontend:
        build: ./cinema-booking/frontend
        networks:
            - waf-to-frontend
            - frontend-to-identity
            - frontend-to-booking
            - frontend-to-movie

    identity:
        build: ./cinema-booking/identity
        networks:
            - frontend-to-identity
            - identity-to-payment
            - identity-to-databaseservice
        environment:
            - PYTHONUNBUFFERED=1

    movie:
        build: ./cinema-booking/movie
        networks:
            - frontend-to-movie
            - movie-to-databaseservice
        environment:
            - PYTHONUNBUFFERED=1
    
    booking:
        build: ./cinema-booking/booking
        networks:
            - frontend-to-booking
            - booking-to-payment
            - booking-to-databaseservice
        environment:
            - PYTHONUNBUFFERED=1

    payment:
        build: ./cinema-booking/payment
        networks:
            - identity-to-payment
            - booking-to-payment
            - payment-to-databaseservice
        environment:
            - PYTHONUNBUFFERED=1

    databaseservice:
        build: ./cinema-booking/databaseservice
        networks:
            - identity-to-databaseservice
            - movie-to-databaseservice
            - payment-to-databaseservice
            - booking-to-databaseservice
            - databaseservice-to-database
        environment:
            - PYTHONUNBUFFERED=1
            - DB_HOST=database
            - DB_NAME=${DB_NAME}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}

    database:
        build:
            context: ./cinema-booking/database
        networks:
        - databaseservice-to-database
        environment:
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
        volumes:
            - ./cinema-booking/init.sql:/docker-entrypoint-initdb.d/init.sql
            - postgres_container:/var/lib/postgresql/data

networks:
  internet-access:
    driver: bridge
  waf-to-frontend:
    driver: bridge
    internal: true
  frontend-to-identity:
    driver: bridge
    internal: true
  frontend-to-booking:
    driver: bridge
    internal: true
  frontend-to-movie:
    driver: bridge
    internal: true
  booking-to-payment:
    driver: bridge
    internal: true
  identity-to-payment:
    driver: bridge
    internal: true
  identity-to-databaseservice:
    driver: bridge
    internal: true
  movie-to-databaseservice:
    driver: bridge
    internal: true
  payment-to-databaseservice:
    driver: bridge
    internal: true
  booking-to-databaseservice:
    driver: bridge
    internal: true
  databaseservice-to-database:
    driver: bridge
    internal: true    

volumes:
  postgres_container:
